// Autogenerated from Pigeon (v9.2.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface StrctSrc ()
+ (StrctSrc *)fromList:(NSArray *)list;
+ (nullable StrctSrc *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation StrctSrc
+ (instancetype)makeWithA:(nullable NSNumber *)a
    b:(nullable NSNumber *)b {
  StrctSrc* pigeonResult = [[StrctSrc alloc] init];
  pigeonResult.a = a;
  pigeonResult.b = b;
  return pigeonResult;
}
+ (StrctSrc *)fromList:(NSArray *)list {
  StrctSrc *pigeonResult = [[StrctSrc alloc] init];
  pigeonResult.a = GetNullableObjectAtIndex(list, 0);
  pigeonResult.b = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable StrctSrc *)nullableFromList:(NSArray *)list {
  return (list) ? [StrctSrc fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.a ?: [NSNull null]),
    (self.b ?: [NSNull null]),
  ];
}
@end

@interface JavaApiCodecReader : FlutterStandardReader
@end
@implementation JavaApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [StrctSrc fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface JavaApiCodecWriter : FlutterStandardWriter
@end
@implementation JavaApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[StrctSrc class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface JavaApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation JavaApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[JavaApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[JavaApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *JavaApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    JavaApiCodecReaderWriter *readerWriter = [[JavaApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void JavaApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<JavaApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.JavaApi.sum"
        binaryMessenger:binaryMessenger
        codec:JavaApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sumSrc:error:)], @"JavaApi api (%@) doesn't respond to @selector(sumSrc:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        StrctSrc *arg_src = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSNumber *output = [api sumSrc:arg_src error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
